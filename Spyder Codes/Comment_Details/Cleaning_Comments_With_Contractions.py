"""
Objective: To Clean Comments in Sentence Level
Packages used:
csv - to manipulate CSV Files
re - Regular Expression Package to Manipulate Text
"""

import csv
import re
cList = {             # Dictionary Used to expand contracted word
  "ain''t": "am not",
  "aren''t": "are not",
  "can''t": "cannot",
  "can''t''ve": "cannot have",
  "''cause": "because",
  "could''ve": "could have",
  "couldn''t": "could not",
  "couldn''t've": "could not have",
  "didn''t": "did not",
  "doesn''t": "does not",
  "don''t": "do not",
  "hadn''t": "had not",
  "hadn''t've": "had not have",
  "hasn''t": "has not",
  "haven''t": "have not",
  "he''d": "he would",
  "he''d''ve": "he would have",
  "he''ll": "he will",
  "he''ll''ve": "he will have",
  "he''s": "he is",
  "how''d": "how did",
  "how''d''y": "how do you",
  "how''ll": "how will",
  "how''s": "how is",
  "I''d": "I would",
  "I''d''ve": "I would have",
  "I''ll": "I will",
  "I''ll''ve": "I will have",
  "I''m": "I am",
  "I''ve": "I have",
  "i''d": "I would",
  "i''d've": "I would have",
  "i''ll": "I will",
  "i''ll've": "I will have",
  "i''m": "I am",
  "i''ve": "I have",
  "isn''t": "is not",
  "it''d": "it had",
  "it''d've": "it would have",
  "it''ll": "it will",
  "it''ll''ve": "it will have",
  "it''s": "it is",
  "let''s": "let us",
  "ma''am": "madam",
  "mayn''t": "may not",
  "might''ve": "might have",
  "mightn''t": "might not",
  "mightn''t''ve": "might not have",
  "must''ve": "must have",
  "mustn''t": "must not",
  "mustn''t've": "must not have",
  "needn''t": "need not",
  "needn''t've": "need not have",
  "o''clock": "of the clock",
  "oughtn''t": "ought not",
  "oughtn''t've": "ought not have",
  "shan''t": "shall not",
  "sha''n''t": "shall not",
  "shan''t''ve": "shall not have",
  "she''d": "she would",
  "she''d've": "she would have",
  "she''ll": "she will",
  "she''ll've": "she will have",
  "she''s": "she is",
  "should''ve": "should have",
  "shouldn''t": "should not",
  "shouldn''t've": "should not have",
  "so''ve": "so have",
  "so''s": "so is",
  "that''d": "that would",
  "that''d've": "that would have",
  "that''s": "that is",
  "there''d": "there had",
  "there''d've": "there would have",
  "there''s": "there is",
  "they''d": "they would",
  "they''d''ve": "they would have",
  "they''ll": "they will",
  "they''ll've": "they will have",
  "they''re": "they are",
  "they''ve": "they have",
  "to''ve": "to have",
  "wasn''t": "was not",
  "we''d": "we had",
  "we''d''ve": "we would have",
  "we''ll": "we will",
  "we''ll''ve": "we will have",
  "we''re": "we are",
  "we''ve": "we have",
  "weren''t": "were not",
  "what''ll": "what will",
  "what''ll''ve": "what will have",
  "what''re": "what are",
  "what''s": "what is",
  "what''ve": "what have",
  "when''s": "when is",
  "when''ve": "when have",
  "where''d": "where did",
  "where''s": "where is",
  "where''ve": "where have",
  "who''ll": "who will",
  "who''ll've": "who will have",
  "who''s": "who is",
  "who''ve": "who have",
  "why''s": "why is",
  "why''ve": "why have",
  "will''ve": "will have",
  "won''t": "will not",
  "won''t''ve": "will not have",
  "would''ve": "would have",
  "wouldn''t": "would not",
  "wouldn''t''ve": "would not have",
  "y''all": "you all",
  "y''alls": "you alls",
  "y''all''d": "you all would",
  "y''all''d''ve": "you all would have",
  "y''all''re": "you all are",
  "y''all''ve": "you all have",
  "you''d": "you had",
  "you''d''ve": "you would have",
  "you''ll": "you you will",
  "you''ll''ve": "you you will have",
  "you''re": "you are",
  "you''ve": "you have",
     
  "ain't": "am not", #are not; is not; has not; have not",
  "aren't": "are not",
  "can't": "cannot",
  "can't've": "cannot have",
  "'cause": "because",
  "could've": "could have",
  "couldn't": "could not",
  "couldn't've": "could not have",
  "didn't": "did not",
  "doesn't": "does not",
  "don't": "do not",
  "hadn't": "had not",
  "hadn't've": "had not have",
  "hasn't": "has not",
  "haven't": "have not",
  "he'd": "he would",
  "he'd've": "he would have",
  "he'll": "he will",
  "he'll've": "he will have",
  "he's": "he is",
  "how'd": "how did",
  "how'd'y": "how do you",
  "how'll": "how will",
  "how's": "how is",
  "I'd": "I would",
  "I'd've": "I would have",
  "I'll": "I will",
  "I'll've": "I will have",
  "I'm": "I am",
  "I've": "I have",
  "i'd": "I would",
  "i'd've": "I would have",
  "i'll": "I will",
  "i'll've": "I will have",
  "i'm": "I am",
  "i've": "I have",
  "isn't": "is not",
  "it'd": "it had",
  "it'd've": "it would have",
  "it'll": "it will",
  "it'll've": "it will have",
  "it's": "it is",
  "let's": "let us",
  "ma'am": "madam",
  "mayn't": "may not",
  "might've": "might have",
  "mightn't": "might not",
  "mightn't've": "might not have",
  "must've": "must have",
  "mustn't": "must not",
  "mustn't've": "must not have",
  "needn't": "need not",
  "needn't've": "need not have",
  "o'clock": "of the clock",
  "oughtn't": "ought not",
  "oughtn't've": "ought not have",
  "shan't": "shall not",
  "sha'n't": "shall not",
  "shan't've": "shall not have",
  "she'd": "she would",
  "she'd've": "she would have",
  "she'll": "she will",
  "she'll've": "she will have",
  "she's": "she is",
  "should've": "should have",
  "shouldn't": "should not",
  "shouldn't've": "should not have",
  "so've": "so have",
  "so's": "so is",
  "that'd": "that would",
  "that'd've": "that would have",
  "that's": "that is",
  "there'd": "there had",
  "there'd've": "there would have",
  "there's": "there is",
  "they'd": "they would",
  "they'd've": "they would have",
  "they'll": "they will",
  "they'll've": "they will have",
  "they're": "they are",
  "they've": "they have",
  "to've": "to have",
  "wasn't": "was not",
  "we'd": "we had",
  "we'd've": "we would have",
  "we'll": "we will",
  "we'll've": "we will have",
  "we're": "we are",
  "we've": "we have",
  "weren't": "were not",
  "what'll": "what will",
  "what'll've": "what will have",
  "what're": "what are",
  "what's": "what is",
  "what've": "what have",
  "when's": "when is",
  "when've": "when have",
  "where'd": "where did",
  "where's": "where is",
  "where've": "where have",
  "who'll": "who will",
  "who'll've": "who will have",
  "who's": "who is",
  "who've": "who have",
  "why's": "why is",
  "why've": "why have",
  "will've": "will have",
  "won't": "will not",
  "won't've": "will not have",
  "would've": "would have",
  "wouldn't": "would not",
  "wouldn't've": "would not have",
  "y'all": "you all",
  "y'alls": "you alls",
  "y'all'd": "you all would",
  "y'all'd've": "you all would have",
  "y'all're": "you all are",
  "y'all've": "you all have",
  "you'd": "you had",
  "you'd've": "you would have",
  "you'll": "you you will",
  "you'll've": "you you will have",
  "you're": "you are",
  "you've": "you have"
}

c_re = re.compile('(%s)' % '|'.join(cList.keys()))

def expandContractions(text, c_re=c_re):
    def replace(match):
        return cList[match.group(0)]
    return c_re.sub(replace, text)

c = 0
filein = open('C:\\Users\\AshwinAmbal\\Desktop\\Intern_Final\\Resources\\All_Comment_Details.csv', 'r', encoding='utf8')
csvfile = open('C:\\Users\\AshwinAmbal\\Desktop\\Intern_Final\\Resources\\All_Comments_Without_Removed.csv', 'w', encoding='utf8', newline = '')
file_in = open('C:\\Users\\AshwinAmbal\\Desktop\\Intern_Final\\Resources\\Top_Level_Comment_Without_Removed.csv', 'w', encoding='utf8', newline = '')
freader = csv.reader(filein, delimiter='|')
fwriter = csv.writer(csvfile, delimiter='|')
writer = csv.writer(file_in, delimiter='|')
for row in freader:
    if c==0:
       c=c+1
       fwriter.writerow(row)    #The First Row is the heading in the csv file
       writer.writerow(row)
       continue
    if row[2] == '[removed]' or row[2] == '[deleted]':
        continue
    else:
        c=c+1
        row[2] = expandContractions(row[2])
        row[2]=' '.join(row[2].split('\t'))
        row[2]='.'.join(row[2].split('\n'))
        row[2]=' '.join(row[2].split('|'))
        row[2]=' '.join(row[2].split('\r'))
        fwriter.writerow(row)
        if row[13].strip() == 'True':   #Checking if it is a Top Level Comment
            writer.writerow(row)
file_in.close()
filein.close()
csvfile.close()      